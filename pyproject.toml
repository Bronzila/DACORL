# For TOML reference
# https://learnxinyminutes.com/docs/toml/
[project]
name = "MTORL-DAC"
version = "0.0.1"
dependencies = [
  "torch==1.13.1",
  "numpy>=1.24.2",
  "tqdm>=4.66.1",
  "wandb>=0.16.2",
  "pandas>=1.5.3",
#  "dacbench@git+https://github.com/Bronzila/DACBench.git@ToySGD_MTDAC",
  "gym",
]
classifiers = [
  "Programming Language :: Python :: 3.10",
  "Natural Language :: English",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
readme = "README.md"
authors = [
  { name = "Janis Fix", email = "fixj@cs.uni-freiburg.de" },
]
requires-python = ">=3.8"
[project.optional-dependencies]
dev = [
  # Others
  "ruff",
  "black",
  "pre-commit",
]

[tool.black]
target-version = ['py38']
line-length = 80

# https://github.com/charliermarsh/ruff
[tool.ruff]
target-version = "py38"
line-length = 100
show-source = true
src = ["src"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

select = [
  "A",
  # "ANN", # Handled by mypy
  "ARG",
  "B",
  "BLE",
  "COM",
  "C4",
  "D",
  # "DTZ",  # One day I should know how to utilize timezones and dates...
  "E",
  # "EXE", Meh
  "ERA",
  "F",
  "FBT",
  "I",
  # "ISC",  # Favours implicit string concatenation
  "INP",
  # "INT", # I don't understand this one
  "N",
  "NPY",
  "PD",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "PIE",
  "PT",
  "PTH",
  # "PYI", # Specific to .pyi files for type stubs
  "Q",
  "PGH004",
  "RET",
  "RUF",
  "C90",
  "S",
  # "SLF",    # Private member accessed (sure, it's python)
  "SIM",
  # "TRY", # Good in principle, would take a lot of work to statisfy
  "T10",
  "T20",
  "TID",
  "TCH",
  "UP",
  "N",
  "W",
  "YTT",
]

ignore = [
  "D100",    # Missing docstring in public module
  "D101",    # Missing docstring in public class
  "D102",    # Missing docstring in public method
  "D103",    # Missing docstring in public function
  "D104",    # Missing docstring in public package
  "D105",    # Missing docstring in magic method
  "D107",    # Missing docstring in public `__init__`
  "D203",    # 1 blank line required before class docstring
  "D205",    # 1 blank line between summary and description
  "D401",    # First line of docstring should be in imperative mood
  "N806",    # Variable X in function should be lowercase
  "E731",    # Do not assign a lambda expression, use a def
  "A003",    # Shadowing a builtin
  "S101",    # Use of assert detected.
  "S301",    # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
  "W292",    # No newline at end of file
  "PLC1901", # "" can be simplified to be falsey
  "PLR0913", # Too many arguments to function call (15 > 10)
  "TCH003",  # Move stdlib import into TYPE_CHECKING
  "FBT001",  # Boolean positional arg in function definition
  # These tend to be lighweight and confuse pyright
  
  # These can or should be revoked
  "T201",     # Print
  "E501",     # Line too long
  "FBT002",   # Boolean default value in function def
  "PLR0915",  # Too many statements
  "C901",     # too complex
  "PD901",    # df is a bad variable name
  "PLR0912",  # too many branches in function
  "PLR2004",  # Magic values --> use const vars instead
  "B006",     # mutable data structures as default arg
  "PLR0911",  # too many return statements 
]

exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "docs",
]

# Exclude a variety of commonly ignored directories.
[tool.ruff.per-file-ignores]
"tests/*.py" = [
  "S101",
  "D103",
  "ANN001",
  "ANN201",
  "FBT001",
  "D100",
  "PLR2004",
  "PD901",   #  X is a bad variable name. (pandas)
  "TCH",
]
"__init__.py" = ["I002"]
"examples/*" = ["INP001", "I002", "E741", "D101", "D103", "T20", "D415"]
"docs/*" = ["INP001"]


[tool.ruff.isort]
known-first-party = ["src"]
no-lines-before = ["future"]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true
extra-standard-library = ["typing_extensions"]
force-wrap-aliases = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pylint]
max-args = 10 # Changed from default of 5

[tool.mypy]
python_version = "3.10"
packages = ["src"]


show_error_codes = true

warn_unused_configs = true # warn about unused [tool.mypy] lines

follow_imports = "normal"      # Type check top level api code we use from imports
ignore_missing_imports = false # prefer explicit ignores

disallow_untyped_defs = true       # All functions must have types
disallow_untyped_decorators = true # ... even decorators
disallow_incomplete_defs = true    # ...all types

no_implicit_optional = true
check_untyped_defs = true

warn_return_any = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false       # Sometimes we just want to ignore verbose types
disallow_untyped_decorators = false # Test decorators are not properly typed
disallow_incomplete_defs = false    # Sometimes we just want to ignore verbose types
